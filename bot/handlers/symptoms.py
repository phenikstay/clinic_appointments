"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–Ω–∞–ª–∏–∑–∞ —Å–∏–º–ø—Ç–æ–º–æ–≤ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤

–í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ STUB-—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã!
"""

from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (
    CallbackQuery,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    Message,
)

from bot.ai.analyzer import SymptomAnalyzer
from bot.api.clinic_client import ClinicAPIClient
from bot.config.settings import bot_settings

router = Router()


class AppointmentStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–∏–µ–º"""

    choosing_doctor = State()
    selecting_time = State()


@router.message(F.text & ~F.text.startswith("/"))
async def handle_symptoms(message: Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–ø–∏—Å–∞–Ω–∏—è —Å–∏–º–ø—Ç–æ–º–æ–≤ –æ—Ç –ø–∞—Ü–∏–µ–Ω—Ç–∞.
    STUB: –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –ò–ò-–∞–Ω–∞–ª–∏–∑–∞ –∏ –≤—ã–±–æ—Ä–∞ –≤—Ä–∞—á–∞.
    """
    symptoms = message.text or ""

    # –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∏
    if message.bot:
        await message.bot.send_chat_action(chat_id=message.chat.id, action="typing")

    try:
        analyzer = SymptomAnalyzer()
        recommendations = await analyzer.analyze_symptoms(symptoms)

        if not recommendations:
            await message.answer(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–∏–º–ø—Ç–æ–º—ã. "
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–ø–∏—Å–∞—Ç—å –∏—Ö –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ."
            )
            return

        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ –≤—Ä–∞—á–µ–π
        keyboard = []
        for rec in recommendations[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-3 —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            confidence_text = f"{rec.confidence}%" if rec.confidence else ""
            button_text = f"{rec.specialist_name} {confidence_text}".strip()

            keyboard.append(
                [
                    InlineKeyboardButton(
                        text=button_text, callback_data=f"select_doctor_{rec.doctor_id}"
                    )
                ]
            )

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –≤—Ä–∞—á–µ–π"
        keyboard.append(
            [
                InlineKeyboardButton(
                    text="üìã –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –≤—Ä–∞—á–µ–π", callback_data="show_all_doctors"
                )
            ]
        )

        reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)

        response_text = (
            "ü§ñ *–ê–Ω–∞–ª–∏–∑ —Å–∏–º–ø—Ç–æ–º–æ–≤ –∑–∞–≤–µ—Ä—à—ë–Ω*\n\n"
            "–ù–∞ –æ—Å–Ω–æ–≤–µ –æ–ø–∏—Å–∞–Ω–Ω—ã—Ö —Å–∏–º–ø—Ç–æ–º–æ–≤ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é:\n\n"
        )

        for i, rec in enumerate(recommendations[:3], 1):
            response_text += f"{i}. {rec.specialist_name}"
            if rec.confidence:
                response_text += f" - {rec.confidence}% —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ"
            if rec.reasoning:
                response_text += f"\n   _{rec.reasoning}_"
            response_text += "\n\n"

        response_text += "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏:"

        await message.answer(
            response_text, reply_markup=reply_markup, parse_mode="Markdown"
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await state.update_data(symptoms=symptoms, recommendations=recommendations)
        await state.set_state(AppointmentStates.choosing_doctor)

    except Exception as e:
        await message.answer(
            f"‚ùå STUB: –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Å–∏–º–ø—Ç–æ–º–æ–≤: {str(e)}\n"
            "–í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫."
        )


@router.callback_query(F.data == "show_all_doctors")
async def show_all_doctors(query: CallbackQuery, state: FSMContext) -> None:
    """STUB: –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤—Ä–∞—á–µ–π"""
    clinic_client = ClinicAPIClient(bot_settings.clinic_api_url)

    try:
        doctors = await clinic_client.get_all_doctors()

        keyboard = []
        for doctor in doctors:
            keyboard.append(
                [
                    InlineKeyboardButton(
                        text=f"{doctor.name} ({doctor.specialty})",
                        callback_data=f"select_doctor_{doctor.id}",
                    )
                ]
            )

        reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)

        if query.message and hasattr(query.message, "edit_text"):
            await query.message.edit_text(
                "üë®‚Äç‚öïÔ∏è *–í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤—Ä–∞—á–∏ (STUB):*\n\n" "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞:",
                reply_markup=reply_markup,
                parse_mode="Markdown",
            )

    except Exception as e:
        if query.message and hasattr(query.message, "edit_text"):
            await query.message.edit_text(
                f"‚ùå STUB: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≤—Ä–∞—á–µ–π: {str(e)}"
            )

    await query.answer()


@router.callback_query(F.data.startswith("select_doctor_"))
async def handle_doctor_selection(query: CallbackQuery, state: FSMContext) -> None:
    """STUB: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≤—Ä–∞—á–∞ –ø–∞—Ü–∏–µ–Ω—Ç–æ–º"""
    if query.data:
        doctor_id = int(query.data.split("_")[2])
        await show_available_slots(query, state, doctor_id)


async def show_available_slots(
    query: CallbackQuery, state: FSMContext, doctor_id: int
) -> None:
    """STUB: –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤—Ä–∞—á–∞"""
    clinic_client = ClinicAPIClient(bot_settings.clinic_api_url)

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–∞—á–µ
        doctor = await clinic_client.get_doctor(doctor_id)

        if not doctor:
            if query.message and hasattr(query.message, "edit_text"):
                await query.message.edit_text("‚ùå STUB: –í—Ä–∞—á –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # STUB: –ü–æ–ª—É—á–∞–µ–º —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã
        available_slots = await clinic_client.get_available_slots(
            doctor_id, days_ahead=7
        )

        if not available_slots:
            if query.message and hasattr(query.message, "edit_text"):
                await query.message.edit_text(
                    f"üòï STUB: –£ –≤—Ä–∞—á–∞ {doctor.name} –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ "
                    "–Ω–∞ –±–ª–∏–∂–∞–π—à—É—é –Ω–µ–¥–µ–ª—é.\n\n"
                    "–í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –∫–∞–ª–µ–Ω–¥–∞—Ä—ë–º."
                )
            await query.answer()
            return

        keyboard = []
        for slot in available_slots[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 5 —Å–ª–æ—Ç–æ–≤ –≤ STUB
            slot_text = f"{slot.date_str} –≤ {slot.time_str}"
            keyboard.append(
                [
                    InlineKeyboardButton(
                        text=slot_text,
                        callback_data=f"book_{doctor_id}_{slot.datetime_str}",
                    )
                ]
            )

        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –≤—Ä–∞—á–∞"
        keyboard.append(
            [
                InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –≤—Ä–∞—á–∞", callback_data="back_to_doctors"
                )
            ]
        )

        reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)

        message_text = (
            f"üìÖ *STUB: –î–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è —É {doctor.name}*\n"
            f"_{doctor.specialty}_\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è:"
        )

        if query.message and hasattr(query.message, "edit_text"):
            await query.message.edit_text(
                message_text, reply_markup=reply_markup, parse_mode="Markdown"
            )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤—Ä–∞—á–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        await state.update_data(selected_doctor_id=doctor_id)
        await state.set_state(AppointmentStates.selecting_time)

    except Exception as e:
        if query.message and hasattr(query.message, "edit_text"):
            await query.message.edit_text(
                f"‚ùå STUB: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {str(e)}"
            )

    await query.answer()


@router.callback_query(F.data.startswith("book_"))
async def handle_appointment_booking(query: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–∏—ë–º —Å —Ä–µ–∞–ª—å–Ω—ã–º —Å–æ–∑–¥–∞–Ω–∏–µ–º —á–µ—Ä–µ–∑ API"""
    if not query.data:
        return

    parts = query.data.split("_", 2)
    doctor_id = int(parts[1])
    datetime_str = parts[2]

    clinic_client = ClinicAPIClient(bot_settings.clinic_api_url)

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –∏–º—è –ø–∞—Ü–∏–µ–Ω—Ç–∞
        patient_name = query.from_user.full_name or f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {query.from_user.id}"

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–∞—á–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        doctor = await clinic_client.get_doctor(doctor_id)
        doctor_name = doctor.name if doctor else f"–í—Ä–∞—á ID {doctor_id}"

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        if query.message and hasattr(query.message, "edit_text"):
            await query.message.edit_text(
                "‚è≥ –°–æ–∑–¥–∞—é –∑–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–∏—ë–º...",
                parse_mode="Markdown",
            )

        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å —á–µ—Ä–µ–∑ API (–∏—Å–ø–æ–ª—å–∑—É–µ–º datetime_str –∫–∞–∫ –µ—Å—Ç—å - —Å UTC)
        appointment = await clinic_client.create_appointment(
            doctor_id=doctor_id,
            patient_name=patient_name,
            start_time=datetime_str,  # –ü–µ—Ä–µ–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É –∫–∞–∫ –µ—Å—Ç—å
        )

        if appointment:
            # –£—Å–ø–µ—à–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏
            appointment_time_clinic = appointment.start_time_clinic
            time_str = appointment_time_clinic.strftime("%d.%m.%Y –≤ %H:%M")

            success_message = (
                f"‚úÖ *–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!*\n\n"
                f"üìã –ù–æ–º–µ—Ä –∑–∞–ø–∏—Å–∏: {appointment.id}\n"
                f"üë®‚Äç‚öïÔ∏è –í—Ä–∞—á: {doctor_name}\n"
                f"üìÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {time_str}\n"
                f"üë§ –ü–∞—Ü–∏–µ–Ω—Ç: {patient_name}\n\n"
                f"üí° –í—Ä–µ–º—è —É–∫–∞–∑–∞–Ω–æ –≤ timezone –∫–ª–∏–Ω–∏–∫–∏ ({bot_settings.timezone})\n"
                "‚è∞ –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–∏–π—Ç–∏ –Ω–∞ –ø—Ä–∏—ë–º –≤–æ–≤—Ä–µ–º—è!"
            )

            if query.message and hasattr(query.message, "edit_text"):
                await query.message.edit_text(
                    success_message,
                    parse_mode="Markdown",
                )
        else:
            # –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏
            error_message = (
                "‚ùå *–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å*\n\n"
                "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                "‚Ä¢ –í—Ä–µ–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ –¥—Ä—É–≥–∏–º –ø–∞—Ü–∏–µ–Ω—Ç–æ–º\n"
                "‚Ä¢ –í—Ä–∞—á –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω\n"
                "‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ —Å–µ—Ä–≤–µ—Ä—É\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è."
            )

            if query.message and hasattr(query.message, "edit_text"):
                await query.message.edit_text(
                    error_message,
                    parse_mode="Markdown",
                )

    except Exception as e:
        if query.message and hasattr(query.message, "edit_text"):
            await query.message.edit_text(
                f"‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–∏—ë–º*\n\n"
                f"–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}\n\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                parse_mode="Markdown",
            )

    await query.answer()
    await state.clear()


@router.callback_query(F.data == "back_to_doctors")
async def handle_back_to_doctors(query: CallbackQuery, state: FSMContext) -> None:
    """STUB: –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –≤—Ä–∞—á–∞"""
    user_data = await state.get_data()
    recommendations = user_data.get("recommendations", [])

    if recommendations:
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –º–µ–Ω—é —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
        keyboard = []
        for rec in recommendations[:3]:
            confidence_text = f"{rec.confidence}%" if rec.confidence else ""
            button_text = f"{rec.specialist_name} {confidence_text}".strip()

            keyboard.append(
                [
                    InlineKeyboardButton(
                        text=button_text, callback_data=f"select_doctor_{rec.doctor_id}"
                    )
                ]
            )

        keyboard.append(
            [
                InlineKeyboardButton(
                    text="üìã –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –≤—Ä–∞—á–µ–π", callback_data="show_all_doctors"
                )
            ]
        )

        reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)

        response_text = (
            "ü§ñ *–ê–Ω–∞–ª–∏–∑ —Å–∏–º–ø—Ç–æ–º–æ–≤ –∑–∞–≤–µ—Ä—à—ë–Ω*\n\n"
            "–ù–∞ –æ—Å–Ω–æ–≤–µ –æ–ø–∏—Å–∞–Ω–Ω—ã—Ö —Å–∏–º–ø—Ç–æ–º–æ–≤ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é:\n\n"
        )

        for i, rec in enumerate(recommendations[:3], 1):
            response_text += f"{i}. {rec.specialist_name}"
            if rec.confidence:
                response_text += f" - {rec.confidence}% —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ"
            if rec.reasoning:
                response_text += f"\n   _{rec.reasoning}_"
            response_text += "\n\n"

        response_text += "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏:"

        if query.message and hasattr(query.message, "edit_text"):
            await query.message.edit_text(
                response_text, reply_markup=reply_markup, parse_mode="Markdown"
            )
    else:
        await show_all_doctors(query, state)

    await state.set_state(AppointmentStates.choosing_doctor)
    await query.answer()
